generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model CollectionPoint {
  id          String @id @default(uuid())
  name        String @unique
  city        String
  lat         String
  lng         String
  fullAddress String
  url         String

  orders Order[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("collection_points")
}

model Client {
  id   String @id @default(uuid())
  name String @unique

  orders Order[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([id, name])
  @@map("clients")
}

model Order {
  id            String      @id @default(uuid())
  internalId    String      @unique
  externalId    String?     @unique
  status        OrderStatus
  clientInvoice String?
  driverInvoice String?
  isPayed       Boolean @default(false)
  comment       String?
  locationFrom  Json
  locationVia   Json?
  locationTo    Json

  withPassenger Boolean?
  estimatedDistance   Int? // calculated distance between start point and end point with via points
  wayBackDistance     Int? // calculated distance from end point to start point without via points
  actualKm      Int? // final distance
  kmForDriver   Int? // modified by user

  hasHighway   Boolean?

  client     Client @relation(fields: [clientId, clientName], references: [id, name])
  clientId   String
  clientName String

  driver   User?   @relation("driverOrders", fields: [driverId], references: [id])
  driverId String?

  lastEditor   User?   @relation("lastEditorOrders", fields: [lastEditorId], references: [id])
  lastEditorId String?

  collectionPoint   CollectionPoint? @relation(fields: [collectionPointId], references: [id])
  collectionPointId String?
  //operator - todo waiting for list from Ewelina

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("orders")
}

model DriverDetails {
  id String @id @default(uuid())

  carModel              String?
  carBrand              String?
  carColor              String?
  carRegistrationNumber String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  //operator - todo waiting for list from Ewelina

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("driver_details")
}

model User {
  id       String @id @default(uuid())
  login    String @unique
  password String

  firstName String?
  lastName  String?
  phone     String? @unique

  role          UserRole
  driverDetails DriverDetails?

  driverOrders     Order[] @relation("driverOrders")
  lastEditedOrders Order[] @relation("lastEditorOrders")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  CLIENT
  DISPATCHER
  DRIVER
}

enum OrderStatus {
  NEW
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
